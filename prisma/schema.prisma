// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  password String
  name String?
  bio String?
  image String? // Base64 encoded image
  location String?
  website String?
  role UserRole @default(STUDENT)
  
  // Education Info
  institution String?
  degree String?
  department String?
  yearOfStudy String? // For students: "2nd year B.Tech"
  graduationYear Int? // For alumni
  
  // Professional Info (Alumni)
  currentPosition String?
  currentOrganization String?
  workExperience Json? // Array of work experiences
  certifications Json? // Array of certifications
  
  // Skills & Interests
  skills Json? // Array of skills
  interests Json? // Array of interests
  
  // Projects & Achievements (Students)
  projects Json? // Array of projects
  achievements Json? // Array of achievements
  resumeUrl String?
  
  // Contact & Social
  linkedinUrl String?
  githubUrl String?
  portfolioUrl String?
  
  // Mentorship
  mentorshipStatus MentorshipStatus @default(NONE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations remain the same
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
  messagesSent Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  jobAssignments JobAssignment[]
  jobSubmissions JobSubmission[]
  meetingsAsStudent Meeting[] @relation("StudentMeetings")
  meetingsAsMentor Meeting[] @relation("MentorMeetings")
}

enum UserRole {
  STUDENT
  ALUMNI
}

enum MentorshipStatus {
  NONE
  SEEKING_MENTOR
  OPEN_TO_MENTOR
  MENTORING
}

model JobAssignment {
  id String @id @default(cuid())
  title String
  description String
  deadline DateTime
  assignmentType String
  skillsRequired Json?
  attachmentUrl String?
  createdById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)
  submissions JobSubmission[]

  @@index([createdById])
}

model JobSubmission {
  id String @id @default(cuid())
  assignmentId String
  studentId String
  submissionText String?
  attachmentUrl String?
  status SubmissionStatus @default(SUBMITTED)
  reviewNotes String?
  referralCompany String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignment JobAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@index([studentId])
}

enum SubmissionStatus {
  SUBMITTED
  REVIEWED
  REFERRED
  REJECTED
}



model Post{
  id        String    @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // cascade delete means delete all posts if author is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[]
}


model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
}

model Message {
  id String @id @default(cuid())
  content String
  senderId String
  receiverId String
  createdAt DateTime @default(now())
  read Boolean @default(false)

  sender User @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
  @@index([createdAt])
}

model Meeting {
  id String @id @default(cuid())
  title String
  date DateTime
  time String
  status MeetingStatus @default(REQUESTED)
  studentId String
  mentorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student User @relation("StudentMeetings", fields: [studentId], references: [id], onDelete: Cascade)
  mentor User @relation("MentorMeetings", fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([studentId, mentorId])
  @@index([date])
}

enum MeetingStatus {
  REQUESTED
  CONFIRMED
  COMPLETED
  CANCELLED
}